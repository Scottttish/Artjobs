name: CI/CD Pipeline for React App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  Docker:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'  # Skip if push is from bot

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build project
        run: CI=false npm run build

      - name: Debug build directory
        run: ls -la build/

      - name: Debug uncommitted changes
        run: |
          echo "Git status:"
          git status
          echo "Untracked files:"
          git status --porcelain

      - name: Clean up build artifacts
        run: |
          # Ensure build directory is removed or ignored to avoid untracked changes
          rm -rf build
          # Optionally, reset any modified files (e.g., package-lock.json)
          git checkout -- package-lock.json || true

      - name: Check for clean working directory
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Error: Working directory is not clean. Please commit or stash changes."
            git status
            exit 1
          fi

      - name: Save version
        id: version
        run: echo "tag=$(node -e 'console.log(require("./package.json").version)')" >> $GITHUB_ENV

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: build
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            scotttish/artjobs:${{ env.tag }}
            scotttish/artjobs:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Commit and push updated version
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Bump version
          npm version patch --no-git-tag-version
          
          # Stage all changes
          git add .
          
          # Commit changes
          git commit -m "ci: bump version to $(node -p -e 'require(\"./package.json\").version')"
          
          # Fetch the latest changes from the remote repository
          git fetch origin main
          
          # Attempt to rebase
          if ! git pull --rebase origin main; then
            echo "Rebase failed, stashing changes and retrying..."
            git rebase --abort
            git stash
            git pull --rebase origin main
            git stash pop
            git add .
            git commit -m "ci: resolve conflicts and bump version to $(node -p -e 'require(\"./package.json\").version')"
          fi
          
          # Push changes
          git push origin main
          
          # Tag the new version
          git tag v$(node -p -e 'require("./package.json").version")
          git push origin --tags
